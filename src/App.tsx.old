import {
  Refine,
  GitHubBanner,
  WelcomePage,
  Authenticated,
} from "@refinedev/core";
import { RefineKbar, RefineKbarProvider } from "@refinedev/kbar";

import {
  AuthPage,
  ErrorComponent,
  notificationProvider,
  RefineSnackbarProvider,
  ThemedLayout,
} from "@refinedev/mui";

import { dataProvider, liveProvider } from "@refinedev/supabase";
import { CssBaseline, GlobalStyles } from "@mui/material";
import { BrowserRouter, Route, Routes, Outlet } from "react-router-dom";
import routerBindings, {
  NavigateToResource,
  CatchAllNavigate,
  UnsavedChangesNotifier,
} from "@refinedev/react-router-v6";
import { supabaseClient } from "utility";
import { ColorModeContextProvider } from "./contexts/color-mode";
import { Header } from "./components/header";
import authProvider from "./authProvider";

import { MuiInferencer } from "@refinedev/inferencer/mui";

import { FsPackageList } from "pages/fs_packages/list";
import { FsClassList } from "pages/fs_classes/list";

function App() {
  return (
    <BrowserRouter>
      <RefineKbarProvider>
        <ColorModeContextProvider>
          <CssBaseline />
          <GlobalStyles styles={{ html: { WebkitFontSmoothing: "auto" } }} />
          <RefineSnackbarProvider>
            <Refine
              resources={[
              {
                name: "fs_packages",
                list: "/fs_packages",
                show: "/fs_packages/show/:id",
                meta: { label: "Package",},
              },
              {
                name: "fs_classes",
                list: "/fs_classes",
                show: "/fs_classes/show/:id",
              },
              {
                name: "fs_eventtype",
                list: "/fs_eventtype",
                show: "/fs_eventtype/show/:id",
              },
             ]}


              dataProvider={dataProvider(supabaseClient)}
              liveProvider={liveProvider(supabaseClient)}
              authProvider={authProvider}
              routerProvider={routerBindings}
              notificationProvider={notificationProvider}
              options={{
                syncWithLocation: true,
                warnWhenUnsavedChanges: true,
              }}
            >
              <Routes>
                <Route index element={<WelcomePage />} />
                <Route path="fs_classes">
                  <Route index element={<MuiInferencer />} />
                  <Route
                    path="show/:id"
                    element={<MuiInferencer />}
                  /> 
                </Route>
                <Route path="fs_eventtype">
                  <Route index element={<MuiInferencer />} />
                  <Route
                    path="show/:id"
                    element={<MuiInferencer />}
                  />
                </Route>
                <Route path="fs_packages">
                  <Route index element={<FsPackageList />} />
                  <Route
                    path="show/:id"
                    element={<MuiInferencer />}
                  />
                </Route>


              </Routes>
              <RefineKbar />
              <UnsavedChangesNotifier />
            </Refine>
          </RefineSnackbarProvider>
        </ColorModeContextProvider>
      </RefineKbarProvider>
    </BrowserRouter>
  );
}

export default App;
